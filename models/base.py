import abcimport torchimport typingfrom foundations import pathsfrom foundations.step import Stepimport training.descfrom platforms.platform import get_platformclass Model(abc.ABC, torch.nn.Module):    """The base class used by all models in this codebase."""    @staticmethod    @abc.abstractmethod    def is_valid_model_name(model_name: str) -> bool:        """Is the model name string a valid name for models in this class?"""        pass    @staticmethod    @abc.abstractmethod    def get_model_from_name(        model_name: str,        outputs: int,        initializer: typing.Callable[[torch.nn.Module], None]) -> 'Model':        """Returns an instance of this class as described by the model_name string."""        pass    @property    @abc.abstractmethod    def output_layer_names(self) -> typing.List[str]:        """A list of the names of the Tensors of the output layer of this model."""        pass    @staticmethod    @abc.abstractmethod    def default_hparams() -> 'training.desc.TrainingDesc':        """The default hyperparameters for training this model and running lottery ticket."""        pass    @property    @abc.abstractmethod    def loss_criterion(self) -> torch.nn.Module:        """The loss criterion to use for this model."""        pass    def save(self, save_location: str, save_step: Step):        if not get_platform().is_primary_process: return        if not get_platform().exists(save_location): get_platform().makedirs(save_location)        get_platform().save_model(self.state_dict(), paths.model(save_location, save_step))